<style lang="less">
 .againstTable{
  width:100%;
  box-sizing: border-box;
  padding-left:20rpx;
  padding-right:20rpx;
}
.againstItem{
  font-size:36rpx;
  height:200rpx;
  background-color: #fff;
  display: flex;
  align-items: center;
  margin:40rpx 0;
  border-radius: 20rpx;
  position: relative;
}
.side,
.handleBtnGroup,
.score,
.sub{
  display: inline-block;
  text-align: center;
  box-sizing: border-box;
  padding:0;
}
/* 总宽 750rpx
padding:20px 0;
其余的 分别宽 160 70 70 110 */
.side{
  width:160rpx;
  }
.handleBtnGroup{
  width:70rpx;
  }
.score{
  width: 70rpx;
}
.sub{
  width:110rpx;
}
.side .name{
  width:100%;
  margin: 10px 0;
  text-align: center;
  white-space:nowrap;
  overflow: hidden;
}
.handleBtnGroup button{
  width:100%;
  height:60rpx;
  line-height: 60rpx;
  margin:10rpx 0;
  text-align: center;
  display: inline-block;
}
.score{
  height:160rpx;
  text-align: center; 
  line-height: 160rpx;
  font-size:60rpx; 
  background:cadetblue; 
}
.scoreL{
  border-bottom-left-radius: 50%;
  border-top-left-radius: 50%;
}
.scoreR{
  border-bottom-right-radius: 50%;
  border-top-right-radius: 50%;
}
.sub{
  font-size: 25rpx;
  letter-spacing: -2rpx;
  text-align: center;
}
.sub .finishBtn{
  margin:5rpx;
  background: gold;
  border-radius: 20%;
} 
.done::before{
  content: '结束';
  position: absolute;
  left:0;
  right:415rpx;
  bottom:0;
  top:0;
}
.done::after{
  content: '结束';
  position: absolute;
  left:405rpx;
  right:0;
  bottom:0;
  top:0;
}
.done::before,.done::after{
  background: orange;
  text-align: center;
  line-height: 95px;
  vertical-align: middle;
  z-index: 999;
  border-radius: 20rpx;
}
.selected{
  background:lightgreen;
  transform:scaleY(1.3);
  transition: transform 0.5s;
}
</style>
<template>
  <view class="againstItem {{item[6]}} {{activedItem===index?'selected':''}}" @tap.capture='selectItem' data-id="{{index}}">
      <view class="side">
        <view class="name">{{item[0]}}</view>
        <view class="name">{{item[1]}}</view>
      </view>
      <!-- <view class="score"> -->
      <view class="handleBtnGroup">
        <button @tap='scoreChange' data-id="{{index}}" data-side="A" data-way="more"  hover-class="hover">+</button>
        <button @tap='scoreChange' data-id="{{index}}" data-side="A" data-way="less"  hover-class="hover">-</button>
      </view>
      <view class="score scoreL">{{item[4]}}</view>
      <view class="sub" @tap="finish" data-id="{{index}}">
        <view>第{{index+1}}场</view>
        <view wx:if="{{item[6]==='undone'}}"  class="finishBtn">结束比赛</view> 
        <view wx:else  class="finishBtn">查看比赛</view>
      </view>
      <view class="score scoreR">{{item[5]}}</view>
      <view class="handleBtnGroup">
        <button @tap='scoreChange' data-id="{{index}}" data-side="B" data-way="more" hover-class="hover">+</button>
        <button @tap='scoreChange' data-id="{{index}}" data-side="B" data-way="less"  hover-class="hover">-</button>
      </view>
      <!-- </view> -->
      <view class="side">
        <view class="name">{{item[2]}}</view>
        <view class="name">{{item[3]}}</view>
      </view>
    </view>
</template>

<script>
  import wepy from 'wepy'
  export default class AgainstTable extends wepy.page {
data= {
    personList:[],
    scoreList:[],
    personCount:0,
    roundCount:4,
    showCreateBtn:true,
    activedItem:''
  };

  onLoad (options) {
    this.initalPersonList();
    // this.setData({
      showCreateBtn=true
    // });
  };

  onShareAppMessage() {
    return {
      title: "CGGC羽球赛"
    }
  };
  onShow(options) {
    this.initalPersonList();
    // this.setData({
      showCreateBtn= true
    // });
  };
  initalPersonList() {
    wx.getStorage({
      key: 'personList',
      success: res => {
        res = res.data.filter((name) => {
          return name
        });
        console.log('get personList',res)

        // this.setData({
          this.personList= res,
          this.personCount= res.length
        // })
      },
    })
  };

  roundCountChange(e){
    // this.setData({
     this.roundCount=new Number(e.detail.value),
      this.showCreateBtn=true
    // })
  };
  createAgainstTableTap() {
    if(!this.data.roundCount||this.data.personCount*this.data.roundCount%4){
      wx.showModal({ 
        title: "错误提示",
        content: "场次和人数的乘积 不能被4整除 排阵失败！！",
        mask:true,
        duration:2000
        })
      return
      }
    // this.getAgainstTable();
    };
  // getAgainstTable:function(){
      // wx.request({
      //   url: `https://gzbtestsystem.cn/badminton/againsttable?NumberOfPeople=${this.data.personCount}&RoundsOfPerson=${this.data.roundCount}&format=json`,
      //   method: "GET",
      //   success: res => {
      //     Array.prototype.numToString.call(res.data.AgainstTable,this.data.personList);
      //     for (let i=0; i<res.data.AgainstTable.length;i++){
      //       res.data.AgainstTable[i] = res.data.AgainstTable[i].concat([0,0,'undone']);
      //     };
      //     this.setData({
      //       scoreList:res.data.AgainstTable,
      //       showCreateBtn: false,
      //     });
      //     wx.setStorage({
      //       key: 'scoreList',
      //       data: res.data.AgainstTable,
      //     });
      //     wx.showModal({
      //       title: '友情建议',
      //       content: `共为您排了${res.data.AgainstTable.length}场比赛，如果您的赛时为2小时，建议预定${Math.ceil(res.data.AgainstTable.length / 14)}个场地!\rps:每个场地不宜超过14场。`,
      //     })
      //   }
      // })
  // },
  scoreChange(e){
    let id = e.target.dataset.id;
    let side=(e.target.dataset.side==='A'?4:5);
    let way=e.target.dataset.way;
    let newScoreList = this.data.scoreList;
    if (way === "more") {
      newScoreList[id][side]++
    } else if (newScoreList[id][side]!==0){
      newScoreList[id][side]--
    };
    // this.setData({
      scoreList=newScoreList
    // });
    wx.setStorage({
      key: 'scoreList',
      data: newScoreList
    })
  };
  selectItem(e){
    // this.setData({
      activedItem=e.currentTarget.dataset.id
    // })
  };
  finish(e){
    let index = e.currentTarget.dataset.id;
    let scoreList=this.data.scoreList;
    scoreList[index][6] = (scoreList[index][6]==='done'?'undone':'done');
    // this.setData({
      scoreList=scoreList
    // })
    console.log(scoreList);
  }
  }
</script>
