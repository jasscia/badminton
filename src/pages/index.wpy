<template>
  <view class="container">
    <!-- <IndexHeader  :titleList.sync="titleList" :selectedItem.sync="activeBar"></IndexHeader> -->
    <view class="tip">请<text class="em">先</text>按照队员的能力<text class="em">由强到弱</text>依次排序后，<text class="em">再生成对阵表</text>，这样有利于避免一些尴尬的情况(如两强vs两弱)，
                      从而生成更合理的对阵表<button class="controller" @tap="toggleIfShowPanel">
                      {{ifShowPanel?'返回报名表':'显示实力调整面板'}}</button></view>
    <inputNames :personList.sync="personList" hidden="{{ifShowPanel}}"></inputNames>
    <view class="roundCount">
      <label for="roundPer">每人场数</label>
      <input type="number" id="roundCount" placeholder="请设定每人场次" value="{{roundCount}}" @input="changeRoundCount" />
      <view class="error" hidden="{{ifOk}}">与人数的乘积 应能被4整除</view>
    </view>
    
    <button id="btn" @tap="makeGroup" 
            disabled="{{!ifOk}}">生产对阵表</button>
    <adajustByStep :personList.sync="personList"  hidden="{{!ifShowPanel}}"></adajustByStep>
    <!-- <resultOfNames :personList.sync="personList"></resultOfNames>     -->
  </view>
</template>
<style lang="less" scoped>
@import '../common/common.less';
.tip{
  font-size: 28rpx;
  color:@font;
  line-height: 50rpx;
  padding:20rpx;
  font-weight: 400;
  background: @btn;
  .em{
    color:@btn-em;
    font-weight: 400;
    font-size:30rpx;
  }
  .controller{
    background-color:lightgreen;
    color:@btn-em;
    height:60rpx;
    line-height: 60rpx;
    display: inline-block;
    vertical-align: middle;
    padding:0 8rpx;
    font-size: 30rpx;
    font-weight: 400;
  }
}
.roundCount{
    display:flex;
    align-items: center;
    font-size:30rpx;
    background: @bgc-card;
    margin-bottom:40rpx;
    padding-left:30rpx;
    label{
      width: 150rpx;
      color: @font-side;
      font-weight: lighter;
    }
    label,input,.error{
      height: 60px;
      line-height: 60px;
      vertical-align: middle;
    }
    input{
      text-align: left;
      padding-left:20rpx;
      flex:1;
    }
    .error{
      width:300rpx;
      text-align: right;
      padding-right:20rpx;
      color:tomato;
      font-size: 24rpx;
    }
}
  #btn{
    margin:40rpx auto;
    // width:450rpx;
    height:100rpx;
    line-height: 100rpx;
    vertical-align: middle;
    text-align: center;
    background: @bgc-card;
  }
</style>

<script>
import wepy from 'wepy'
import { setStorage } from '../common/util'
import { requestTableList } from '../common/common'
import header from '../components/header'
import inputNames from '../components/inputNames'
import adajustByStep from '../components/adajustByStep'
import 'wepy-async-function'
export default class Index extends wepy.page {
  components = {
    IndexHeader: header,
    inputNames: inputNames,
    adajustByStep: adajustByStep
  }
  data={
    personList: [],
    personCount:0,
    roundCount:null,
    activeBar: '输入报名人员',
    titleList: ['输入报名人员', '调整人员实力'],
    ifShowPanel:false,
    ifOk:false
  }
  watch={
    personList () {
      setStorage('personList', this.personList)
      setStorage('groupList',[])
      this.personCount=this.calPersonCount()
      this.ifOk=this.judgeIfOk()
    },
    roundCount(){
      this.ifOk=this.judgeIfOk()
    },
    // activeBar(){
    //   this.personList=this.personList.filter(name=>{
    //     return name
    //   })
    // }
  }
  onShareAppMessage() {
    return {
      path:'/pages/index'
    }
  }
  events={
    upadtaPersonList(newPersonList) {
      this.personList = newPersonList.filter(name=>{
        return name
      })
    }
  }
  methods={
    changeRoundCount(e){
      this.roundCount=e.detail.value
    },
    toggleIfShowPanel(){
      this.ifShowPanel=!this.ifShowPanel
    },
    makeGroup() {
      this.getAgainstTable()
    }
  }
  getAgainstTable= async function() {
    // 由于后端顺序 是由弱到强排列的 所以 先对人员的数组转序
    let reversePersonList = []
    for (let i = this.personList.length - 1; i >= 0; i--) {
      if(this.personList[i]){
        reversePersonList.push(this.personList[i])
      }
    }
    //请求 对阵表
    let groupList=await requestTableList(this.personCount,this.roundCount)
    //将请求到的 只有数字的对阵表 转换成带人名的 对阵表，并在后面加上 分数 和完成状态
    groupList.forEach((numList,index,groupList)=>{
      // console.log('index',index+1,groupList[index].slice())
      this.transformNumToPersonName(numList,reversePersonList)
      // console.log('index',index+1,groupList[index].slice())
      groupList[index]=groupList[index].concat([0, 0, 'undone'])
    })
    //完成后保存结果 并跳转到对阵表
    wx.setStorageSync('groupList',groupList)
    wx.showModal({
      title: '友情建议',
      content: `共为您排了${groupList.length}场比赛，如果您的赛时为2小时，建议预定${Math.ceil(groupList.length / 14)}个场地!\rps:每个场地不宜超过14场。`,
      success:()=>{
        wx.switchTab({
          url:'/pages/main'
        })
      }
    })       
  }
  transformNumToPersonName(numList,nameList){
    numList.forEach((num,index,numList) => {
      numList[index]=nameList[num-1]
    });
  }
  judgeIfOk(){
      if(this.personCount<4){
        return false}
      if(!this.roundCount){
        return false}
      if(this.personCount*this.roundCount%4!==0){
        return false}
      return true
  }
  calPersonCount(){
    let personList=this.personList.filter(name=>{
      return name
    })
    return personList.length
  }
}
</script>
