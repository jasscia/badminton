<template>
  <view class="container" style="min-height:{{windowHeight}}px">
    <view class="tophead">
      <text class="title">报名表</text>
      <button class="button">快速输入</button>
    </view>
    <view class="tip">
      <text>请按队员能力由强到弱排序，这样有利于生成更合理的对阵表,避免一些尴尬的情况 如两强vs两弱。</text>
    </view>
    <view>
      <panle wx:if="{{personList.length}}" :personList.sync="personList"></panle>
    </view>
    <view class="inputGroup round">
      <view class="title">每个队员的比赛场数</view>
      <input type="number" class="roundCount" @input="roundCountInput" 
          placeholder="要求与人数的乘积能被4整除"
          placeholder-style="font-weight:700;color:tomato;font-size:24rpx"/>
    </view>
    <button class="makeGroup" @tap="makeGroup" 
            disabled="{{!ifOk}}">生成对阵表</button>

    <view  class="inputGroup names">
      <text class="title">人员报名</text>
      <input type="text" class="roundCount" @input="inputName" 
            placeholder="这里输入参赛队员姓名，用 '+' 或 '空格' 结束" 
            placeholder-style="font-weight:200;color:red;font-size:24rpx"/>
    </view>
    
    
  </view>
</template>
<style lang="less" scoped>
@import '../common/common.less';
.tophead{
  background: @bgc-card;
  padding-top:60rpx;
  border-bottom: 1rpx solid @font-side;
  width:750rpx;
  text-align: center;
  font-size: 60rpx;
  font-weight: 900;
  position: relative;
  .button{
    height:60rpx;
    line-height: 60rpx;
    width:130rpx;
    margin:0;
    font-size:28rpx;
    text-align: center;
    position: absolute;
    right:60rpx;
    bottom:10rpx;
    padding:5rpx;
  }
}
  .tip{
  font-size: 28rpx;
  line-height: 50rpx;
  padding:20rpx;
  font-weight: 700;
  background: @bgc-card
  }
.inputGroup{
  display: flex;
  font-size:28rpx;
  font-weight: 700;
  background:@bgc-card;
  padding:auto 20rpx;
  height:120rpx;
  line-height: 120rpx;
  vertical-align: middle;
  input{
    flex:1;
    margin-right:60rpx;
    border:1rpx solid @bgc;
    border-radius: 5rpx;
    height:80rpx;
    line-height: 80rpx;
    margin:10rpx 20rpx;
    padding:auto 20rpx;
    
    
  }
}
  .makeGroup{
    margin:30rpx 40rpx;
    height:100rpx;
    line-height: 100rpx;
    vertical-align: middle;
    text-align: center;
    background: @btn;
  }
</style>

<script>
import wepy from 'wepy'
import { requestTableList } from '../common/common'
import panle from '../components/panle'
import 'wepy-async-function'
export default class Index extends wepy.page {
  components = {
    panle:panle
  }
  data={
    personList: [],
    personCount:0,
    roundCount:null,
    ifOk:false,
    windowHeight:750
  }
  onShareAppMessage() {
    return {
      path:'/pages/index'
    }
  }
  onLoad(){
    this.personList=wx.getStorageSync('personList')
    this.personCount=this.personList.length
    this.ifOk=(this.personCount>=4 && this.roundCount && !(this.personCount*this.roundCount%4))
    wx.getSystemInfo({
    success(res){
      this.windowHeight=res.windowHeight
      console.log(this.windowHeight)
    }
  })
  }
  watch={
    personList(personList){
      wx.setStorageSync('personList',personList)
    }
  }
  events={
    updatePersonList(personList) {
      this.personList = personList.filter(name=>{
        return name
      })
      this.personCount=this.personList.length
    }
  }
  methods={
    inputName(e){
      let content = e.detail.value
      let pos = e.detail.cursor
      let reg=/[\+\＋\s]+/
      let lastChar=content.charAt(content.length-1)
      if(reg.test(lastChar)){
        let names=content.split(/[\+\＋\s]+/).filter(name=>{
          return name
        })
        this.personList=[...this.personList,...names]
        return {
          value: '',
          cursor: 0
        }
      }
    },
    roundCountInput(e){
      this.roundCount=e.detail.value
      this.ifOk=(this.personCount>=4 && this.roundCount && !(this.personCount*this.roundCount%4))
    },
    makeGroup() {
      this.getAgainstTable()
    }
  }
  getAgainstTable= async function() {
    // 由于后端顺序 是由弱到强排列的 所以 先对人员的数组转序
    let reversePersonList = []
    for (let i = this.personList.length - 1; i >= 0; i--) {
      if(this.personList[i]){
        reversePersonList.push(this.personList[i])
      }
    }
    //请求 对阵表
    let groupList=await requestTableList(this.personCount,this.roundCount)
    //将请求到的 只有数字的对阵表 转换成带人名的 对阵表，并在后面加上 分数 和完成状态
    groupList.forEach((numList,index,groupList)=>{
      // console.log('index',index+1,groupList[index].slice())
      this.transformNumToPersonName(numList,reversePersonList)
      // console.log('index',index+1,groupList[index].slice())
      groupList[index]=groupList[index].concat([0, 0, 'undone'])
    })
    //完成后保存结果 并跳转到对阵表
    wx.setStorageSync('groupList',groupList)
    wx.showModal({
      title: '友情建议',
      content: `共为您排了${groupList.length}场比赛，如果您的赛时为2小时，建议预定${Math.ceil(groupList.length / 14)}个场地!\rps:每个场地不宜超过14场。`,
      success:()=>{
        wx.switchTab({
          url:'/pages/main'
        })
      }
    })       
  }
  transformNumToPersonName(numList,nameList){
    numList.forEach((num,index,numList) => {
      numList[index]=nameList[num-1]
    });
  }
}
</script>
